/*/////////////////////////////////////////////////////////////////////////
  Exercise 1
  Iordanis Ioannis
/*///////////////////////////////////////////////////////////////////////*/

/**************************************************************************
/**************************************************************************
  1
/**************************************************************************
/*************************************************************************/

/*------------------------------------------------------------------------
  AOI of examination
/*-----------------------------------------------------------------------*/

var x1=21.54139803159188, y1=37.564139328949565,
    x2=21.545174581884847, y2= 37.57039833469595,
    x3=21.586716635107503, y3=37.54780901249413,
    x4=21.59426973569344, y4=37.55107536207687,
    x5=21.561997396826253, y5=37.58046606643399,
    x6=21.54757784116219, y6=37.59134856950578,
    x7=21.532471639990316, y7=37.60250148393698,
    x8=21.504319174170003, y8=37.62289883043009,
    x9=21.477883322119222, y9=37.63785332853892,
    x10=21.460373861670003, y10=37.635950195903206,
    x11=21.455910665869222, y11=37.6131088023268,
    x12=21.54139803159188, y12=37.564139328949565;


Map.setCenter ((x1+x11)/2, (y1+y11)/2, 12);

var AOI = ee.Geometry.LineString (
  [[x1, y1], [x2, y2], [x3, y3], [x4, y4], [x5, y5], [x6, y6], 
    [x7, y7], [x8, y8], [x9, y9], [x10, y10], [x11, y11], [x12, y12]]);

/*------------------------------------------------------------------------
  Collecting data from LANDSAT 8 of the AOI for year 2022
/*-----------------------------------------------------------------------*/

var Col_L8 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate('2022-1-1', '2023-1-1')   
   .filterBounds(AOI.bounds()
);

/*------------------------------------------------------------------------
  Filtering the data of the AOI for year 2022 to have cloud coverage < 20%
/*-----------------------------------------------------------------------*/
var l8_filtered = Col_L8.filter(ee.Filter.lt('CLOUD_COVER', 20));
   
print (l8_filtered);

/*------------------------------------------------------------------------
  Sorting the days to find the one with the least cloud coverage
/*-----------------------------------------------------------------------*/
var least_cloudy_day = l8_filtered.sort('CLOUD_COVER').first();
      
print ('Least cloudy day:', least_cloudy_day);

/*------------------------------------------------------------------------
  True Color Composite of least cloudy day (RGB-432)
/*-----------------------------------------------------------------------*/
var vizParams = {
  bands: ['B4', 'B3', 'B2'],
  min: 0.030632758513092995,
  max: 0.20444530248641968
};

var least_cloudy_day_composite = ee.Algorithms.Landsat.simpleComposite({
  collection: least_cloudy_day,
  asFloat: true
});

// Projecting True Color Composite as Layer using above Parameters

Map.addLayer (least_cloudy_day_composite, vizParams, 'True Color Composite');

/*------------------------------------------------------------------------
  False Color Composite of least cloudy day (RGB-543)
/*-----------------------------------------------------------------------*/
var vizParams = {
  bands: ['B5', 'B4', 'B3'],
  min: 0.013433031737804413,
  max: 0.5736267566680908
};

// Projecting False Color Composite as Layer using above Parameters

Map.addLayer (least_cloudy_day_composite, vizParams, 'False Color Composite');

/*------------------------------------------------------------------------
  NDVI on least cloudy day
/*-----------------------------------------------------------------------*/

// Finding the least cloudy day as ImageCollection by using "('CLOUD_COVER', 0.86)"
// because from "print ('Least cloudy day:', least_cloudy_day)" we notice 
// its CLOUD_COVER is 0.85

var l8_filtered_least_cloudy_day = Col_L8.filter(ee.Filter.lt('CLOUD_COVER', 0.86));
   
print (l8_filtered_least_cloudy_day);

// Function to find NDVI

var NDVI = function(image) {
  return image.expression('float(b("B5") - b("B4")) / float(b("B5") + b("B4"))');
};

// Parameters of NDVI

var vis_NDVI = {
  min : -0.12,
  max : 0.62,
  palette: ['ff0000','00ff00']
};

// Projecting NDVI as Layer using the above parameters

Map.addLayer (l8_filtered_least_cloudy_day.map (NDVI), vis_NDVI, 'NDVI on least cloudy day');


/**********************************************************************************
 **********************************************************************************
  2
 **********************************************************************************
/*********************************************************************************/

var year=2022;

/*------------------------------------------------------------------------
   NDVI on year 2022
/*----------------------------------------------------------------------*/

// Function to find NDVI

var NDVI_fun = function(image) {
  var date = ee.Date (image.date ());
  var days = date.difference(ee.Date.fromYMD (date.get ('year'), 1, 1), 'day');
  
  return image.expression('float(b("B5") - b("B4")) / float(b("B5") + b("B4"))')
      .rename ('NDVI')
      .addBands (ee.Image (days).rename ('DOY').float())
      .set ({Time : date});
};

var NDVI = l8_filtered.map (NDVI_fun);

print ('NDVI', NDVI);

// Time - Series Chart for NDVI 2022

print(ui.Chart.image.series({
  imageCollection: NDVI.select('NDVI'), region: AOI, reducer: ee.Reducer.mean(), scale:100, xProperty: 'Time'})
    .setSeriesNames(['NDVI'])
    .setChartType('ScatterChart')
    .setOptions({
      title: 'Max NDVI Value for 2022',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));

// Day of 2022 with the highest NDVI

var l8_filtered_max_NDVI = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate('2022-5-16','2022-5-17')   
   .filterBounds(AOI.bounds()
   );
   
print (l8_filtered_max_NDVI);

// Function to find NDVI

var NDVI_2022 = function(image) {
  return image.expression('float(b("B5") - b("B4")) / float (b("B5") + b("B4"))');
};

// Parameters of NDVI

var vis_NDVI_2022 = {
  min : -0.12,
  max : 0.62,
  palette: ['ff0000','00ff00']
};

// Projecting NDVI as Layer using the above parameters

Map.addLayer (l8_filtered_max_NDVI.map(NDVI_2022), vis_NDVI_2022, 'Day of 2022 with the highest NDVI');


// Parameters for NDVI

var vis_NDVI = {
  bands:['NDVI'],
  min : -0.12,
  max : 0.627,
  palette: ['ff0000','00ff00']
};

// Projecting max NDVI per pixel as Layer using the above parameters

Map.addLayer (NDVI.max(), vis_NDVI, 'Max NDVI 2022');

// Finding DOY with max NDVI per pixel

var DOY_max_NDVI_22 = NDVI.reduce (
  ee.Reducer.max (2)
  ).rename ('NDVI', 'DOY');
  
var vis_DOY = {
  bands: 'DOY',
  min : 1,
  max : 365,
  palette: ['ff0000', 'ffa500', 'ffff00', 'ffb6c1']
};

// Projecting DOY with max NDVI per pixel
Map.addLayer (DOY_max_NDVI_22, vis_DOY, 'Day of Year with max NDVI for 2022');

/*------------------------------------------------------------------------
   BSI on year 2022
/*----------------------------------------------------------------------*/

// Function to find BSI

var BSI_fun = function(image) {
  var date = ee.Date (image.date ());
  var days = date.difference(ee.Date.fromYMD (date.get ('year'), 1, 1), 'day');
  
  return image.expression(
    'float (((b("B4") + b("B6")) - (b("B5") + b("B2"))) / ((b("B4") + b("B6")) + (b("B5") + b("B2"))))')
      .rename ('BSI')
      .addBands (ee.Image (days).rename ('DOY').float())
      .set ({Time : date});
};

var BSI = l8_filtered.map (BSI_fun);

print ('BSI', BSI);

// Time - Series Chart for BSI 2022

print(ui.Chart.image.series({
  imageCollection: BSI.select('BSI'), region: AOI, reducer: ee.Reducer.mean(), scale: 30, xProperty: 'Time' })
    .setSeriesNames(['BSI'])
    .setChartType('ScatterChart')
    .setOptions({
      title: 'Max BSI Value for 2022',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));

//  Day of 2022 with the highest BSI

var l8_filtered_max_BSI = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate('2022-9-21','2022-9-22')   
   .filterBounds(AOI.bounds()
   );
   
print (l8_filtered_max_BSI);

// Function to find BSI

var BSI_2022 = function(image) {
  return image.expression(
    'float (((b("B4") + b("B6")) - (b("B5") + b("B2"))) / ((b("B4") + b("B6")) + (b("B5") + b("B2"))))');
};

// Parameters of BSI

var vis_BSI_2022 = {
  min   : -0.33,
  max   : 0.12,
  palette: ['000000', 'ffffff']
};

// Projecting BSI as Layer using the above parameters

Map.addLayer (l8_filtered_max_BSI.map(BSI_2022), vis_BSI_2022, 'Day of 2022 with the highest BSI');


// Parameters for BSI

var vis_BSI = {
  bands:['BSI'],
  min   : -0.33,
  max   : 0.12,
  palette: ['000000', 'ffffff']
};

// Projecting max BSI per pixel as Layer using the above parameters

Map.addLayer (BSI.max(), vis_BSI, 'Max BSI 2022');

// Finding DOY with max BSI per pixel

var DOY_max_BSI_22 = BSI.reduce (
  ee.Reducer.max (2)
  ).rename ('BSI', 'DOY');
  
var vis_DOY = {
  bands: 'DOY',
  min : 1,
  max : 365,
  palette: ['ff0000', 'ffa500', 'ffff00', 'ffb6c1']
};

// Projecting DOY with max BSI per pixel
Map.addLayer (DOY_max_BSI_22, vis_DOY, 'Day of Year with max BSI for 2022');



/*------------------------------------------------------------------------
   NDWI on year 2022
/*----------------------------------------------------------------------*/

// Function to find NDWI

var NDWI_fun = function(image) {
  var date = ee.Date (image.date ());
  var days = date.difference(ee.Date.fromYMD (date.get ('year'), 1, 1), 'day');
  
  return image.expression('float((b("B3") - b("B5")) / (b("B3") + b("B5")))')
      .rename ('NDWI')
      .addBands (ee.Image (days).rename ('DOY').float())
      .set ({Time : date});
};

var NDWI = l8_filtered.map (NDWI_fun);

print ('NDWI', NDWI);

// Time - Series Chart for NDWI 2022

print(ui.Chart.image.series({
  imageCollection: NDWI.select('NDWI'), region: AOI, reducer: ee.Reducer.mean(), scale: 30, xProperty: 'Time' })
    .setOptions({
      title: 'Max NDWI Value for 2022',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));

//  Day of 2022 with the highest NDWI

var l8_filtered_max_ndwi = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate('2022-12-26','2022-12-27')   
   .filterBounds(AOI.bounds()
   );
   
print (l8_filtered_max_ndwi);

// Function to find NDWI

var NDWI_2022 = function(image) {
  return image.expression('float(b("B3") - b("B5")) / (b("B3") + b("B5"))');
};

// Parameters of NDWI

var vis_NDWI_2022 = {
  min: -0.44,
  max: 0.22,
  palette: ['ff0000', '00ff00', '0000ff']
};

// Projecting NDWI as Layer using the above parameters

Map.addLayer (l8_filtered_max_ndwi.map(NDWI_2022), vis_NDWI_2022, 'Day of 2022 with the highest NDWI');


// Parameters for NDWI

var vis_NDWI = {
  bands:['NDWI'],
  min: -0.44,
  max: 0.22,
  palette: ['ff0000', '00ff00', '0000ff']
};

// Projecting max NDWI per pixel as Layer using the above parameters

Map.addLayer (NDWI.max(), vis_NDWI, 'Max NDWI 2022');

// Finding DOY with max NDWI per pixel

var DOY_max_NDWI_22 = NDWI.reduce (
  ee.Reducer.max (2)
  ).rename ('NDWI', 'DOY');
  
var vis_DOY = {
  bands: 'DOY',
  min : 1,
  max : 365,
  palette: ['ff0000', 'ffa500', 'ffff00', 'ffb6c1']
};

// Projecting DOY with max NDWI per pixel
Map.addLayer (DOY_max_NDWI_22, vis_DOY, 'Day of Year with max NDWI for 2022');

/*************************************************************************
  Year 2021
/************************************************************************/
var Col_L8 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate('2021-1-1', '2022-1-1')   
   .filterBounds(AOI.bounds()
);
/*------------------------------------------------------------------------
  Filtering the data of the AOI for year 2021 to have cloud coverage < 20%
/*-----------------------------------------------------------------------*/
var l8_filtered_2021 = Col_L8.filter(ee.Filter.lt('CLOUD_COVER', 20));

var year=2021;

/*------------------------------------------------------------------------
   NDVI on year 2021
/*----------------------------------------------------------------------*/

var NDVI = l8_filtered_2021.map (NDVI_fun);

print ('NDVI', NDVI);

// Time - Series Chart for NDVI 2021

print(ui.Chart.image.series(
  NDVI.select('NDVI'), AOI, ee.Reducer.mean(), 30, 'Time' )
    .setOptions({
      title: 'Max NDVI Value for 2021',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));

// Day of 2021 with the highest NDVI

var l8_filtered_max_NDVI_2021 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate('2021-4-11','2021-4-12')   
   .filterBounds(AOI.bounds()
   );
   
print (l8_filtered_max_NDVI_2021);

// Function to find NDVI

var NDVI_2021 = function(image) {
  return image.expression('float((b("B5") - b("B4")) / (b("B5") + b("B4")))');
};

// Parameters of NDVI

var vis_NDVI_2021 = {
  min : -0.12,
  max : 0.62,
  palette: ['ff0000','00ff00']
};

// Projecting NDVI as Layer using the above parameters

Map.addLayer (l8_filtered_max_NDVI_2021.map(NDVI_2021), vis_NDVI_2021, 'Day of 2021 with the highest NDVI');


// Parameters for NDVI

var vis_NDVI_2021 = {
  bands:['NDVI'],
  min :-0.12,
  max : 0.62,
  palette: ['ff0000','00ff00']
};

// Projecting max NDVI per pixel as Layer using the above parameters

Map.addLayer (NDVI.max(), vis_NDVI_2021, 'Max NDVI 2021');

// Finding DOY with max NDVI per pixel

var DOY_max_NDVI_21 = NDVI.reduce (
  ee.Reducer.max (2)
  ).rename ('NDVI', 'DOY');
  
var vis_DOY = {
  bands: 'DOY',
  min : 1,
  max : 365,
  palette: ['ff0000', 'ffa500', 'ffff00', 'ffb6c1']
};

// Projecting DOY with max NDVI per pixel
Map.addLayer (DOY_max_NDVI_21, vis_DOY, 'Day of Year with max NDVI for 2021');

/*------------------------------------------------------------------------
   BSI on year 2021
/*----------------------------------------------------------------------*/

var BSI = l8_filtered_2021.map (BSI_fun);

print ('BSI', BSI);

// Time - Series Chart for BSI 2021

print(ui.Chart.image.series(
  BSI.select('BSI'), AOI, ee.Reducer.mean(), 30, 'Time' )
    .setOptions({
      title: 'Max BSI Value for 2021',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));

//  Day of 2021 with the highest BSI

var l8_filtered_max_BSI_2021 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate('2021-10-4','2021-10-5')   
   .filterBounds(AOI.bounds()
   );
   
print (l8_filtered_max_BSI_2021);

// Function to find BSI

var BSI_2021 = function(image) {
  return image.expression(
    'float(((b("B4") + b("B6")) - (b("B5") + b("B2"))) / ((b("B4") + b("B6")) + (b("B5") + b("B2"))))');
};

// Parameters of BSI

var vis_BSI_2021 = {
  min   : -0.33,
  max   : 0.12,
  palette: ['000000', 'ffffff']
};

// Projecting BSI as Layer using the above parameters

Map.addLayer (l8_filtered_max_BSI_2021.map(BSI_2021), vis_BSI_2021, 'Day of 2021 with the highest BSI');


// Parameters for BSI

var vis_BSI_2021 = {
  bands:['BSI'],
  min   : -0.33,
  max   : 0.12,
  palette: ['000000', 'ffffff']
};

// Projecting max BSI per pixel as Layer using the above parameters

Map.addLayer (BSI.max(), vis_BSI_2021, 'Max BSI 2021');

// Finding DOY with max BSI per pixel

var DOY_max_BSI_21 = BSI.reduce (
  ee.Reducer.max (2)
  ).rename ('BSI', 'DOY');
  
var vis_DOY = {
  bands: 'DOY',
  min : 1,
  max : 365,
  palette: ['ff0000', 'ffa500', 'ffff00', 'ffb6c1']
};

// Projecting DOY with max BSI per pixel
Map.addLayer (DOY_max_BSI_21, vis_DOY, 'Day of Year with max BSI for 2021');

/*------------------------------------------------------------------------
   NDWI on year 2021
/*----------------------------------------------------------------------*/

var NDWI = l8_filtered_2021.map (NDWI_fun);

print ('NDWI', NDWI);

// Time - Series Chart for NDWI 2021

print(ui.Chart.image.series(
  NDWI.select('NDWI'), AOI, ee.Reducer.mean(), 30, 'Time' )
    .setOptions({
      title: 'Max NDWI Value for 2021',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));

//  Day of 2021 with the highest NDWI

var l8_filtered_max_ndwi_2021 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate('2021-11-5','2022-11-6')   
   .filterBounds(AOI.bounds()
   );
   
print (l8_filtered_max_ndwi_2021);

// Function to find NDWI

var NDWI_2021 = function(image) {
  return image.expression('float((b("B3") - b("B5")) / (b("B3") + b("B5")))');
};

// Parameters of NDWI

var vis_NDWI_2021 = {
  min: -0.44,
  max: 0.22,
  palette: ['ff0000', '00ff00', '0000ff']
};

// Projecting NDWI as Layer using the above parameters

Map.addLayer (l8_filtered_max_ndwi_2021.map(NDWI_2021), vis_NDWI_2021, 'Day of 2021 with the highest NDWI');


// Parameters for NDWI

var vis_NDWI_2021 = {
  bands:['NDWI'],
  min: -0.44,
  max: 0.22,
  palette: ['ff0000', '00ff00', '0000ff']
};

// Projecting max NDWI per pixel as Layer using the above parameters

Map.addLayer (NDWI.max(), vis_NDWI_2021, 'Max NDWI 2021');

// Finding DOY with max NDWI per pixel

var DOY_max_NDWI_21 = NDWI.reduce (
  ee.Reducer.max (2)
  ).rename ('NDWI', 'DOY');
  
var vis_DOY = {
  bands: 'DOY',
  min : 1,
  max : 365,
  palette: ['ff0000', 'ffa500', 'ffff00', 'ffb6c1']
};

// Projecting DOY with max NDWI per pixel
Map.addLayer (DOY_max_NDWI_21, vis_DOY, 'Day of Year with max NDWI for 2021');

/**************************************************************************
/**************************************************************************
  3
/**************************************************************************
/*************************************************************************/
/*------------------------------------------------------------------------
   AOI 1
/*----------------------------------------------------------------------*/
// Collecting data from LANDSAT 8 of the AOI for years 2017-2022 and
// filtering the data of the AOI to have cloud coverage < 20%
var Col_L8 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate ('2017', '2022')   
   .filterBounds (AOI.bounds())
   .filter(ee.Filter.lt ('CLOUD_COVER', 20));

print ('Landsat 8, 2017 - 2022 Series for AOI 1', Col_L8);

// Variable and number of harmonics' cycles 
var dependent = 'NDVI';  
var harmonics = 3;

// Creating Functions that:

// Get a list of harmonic frequencies
var harmonicFrequencies = ee.List.sequence (1, harmonics);

// Get a list of band names for harmonic frequencies
var getNames = function(base, list) {
  return ee.List(list).map(function(i) { 
    return ee.String(base).cat(ee.Number(i).int());
  });
};

// Get lists of names for harmonic frequencies
var cosNames = getNames('cos_', harmonicFrequencies);
var sinNames = getNames('sin_', harmonicFrequencies);

// Set independent variables
var independents = ee.List(['constant', 't']).cat(cosNames).cat(sinNames);

// Find NDVI and add it as band
var addNDVI = function(image) {
  return image
    .addBands(image.normalizedDifference(['B5', 'B4'])
    .rename('NDVI'))
    .float();
};

// Add a constant band
var addConstant = function(image) {
  return image.addBands(ee.Image(1));
};

// Add a time band
var addTime = function(image) {
  var date = image.date();
  var years = date.difference(ee.Date('2017-01-01'), 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI));
  return image.addBands(timeRadians.rename('t').float());
};

// Computes the specified number of harmonics and add them as bands
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies
    var frequencies = ee.Image.constant(freqs);
    // This band represents time in radians.
    var time = ee.Image(image).select('t');
    // Get the cosine terms
    var cosines = time.multiply(frequencies).cos().rename(cosNames);
    // Get the sin terms
    var sines = time.multiply(frequencies).sin().rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};

// Filter to the AOI, mask clouds, add variables
var harmonicLandsat = Col_L8
  .map(addNDVI)
  .map(addConstant)
  .map(addTime)
  .map(addHarmonics(harmonicFrequencies));

// Function that I used to not re-write the 3 following vars for AOI 2
var main_fun = function(Col_L8) {
    var harmonicTrend = harmonicLandsat
    .select(independents.add(dependent))
    .reduce(ee.Reducer.linearRegression(independents.length(), 1));
  
  // Turn the array image into a multi-band image of coefficients
    var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
    .arrayProject([0])
    .arrayFlatten([independents]);
  
  // Computing the values of fitted harmonics
    var fittedHarmonic = harmonicLandsat.map(function(image) {
    return image.addBands(
      image.select(independents)
        .multiply(harmonicTrendCoefficients)
        .reduce('sum')
        .rename('fitted'));
  });
    return fittedHarmonic;
  };
var fittedHarmonic = main_fun(Col_L8);
  
// Plot of harmonic model of AOI 1
print(ui.Chart.image.series(
  fittedHarmonic.select(['fitted', 'NDVI']), AOI, ee.Reducer.mean(), 30)
    .setOptions({
      title: 'Harmonic model of AOI',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));

/*------------------------------------------------------------------------
   AOI 2
/*----------------------------------------------------------------------*/
var x1=21.616045181914494, y1=37.60521703439691,
    x2=21.665483658476994, y2=37.60086503530056,
    x3=21.662737076445744, y3=37.567128410856796,
    x4=21.627031510039494, y4=37.585631033626,
    x5=21.616045181914494, y5=37.60521703439691;

var AOI2 = ee.Geometry.LineString (
  [[x1, y1], [x2, y2], [x3, y3], [x4, y4], [x5, y5]]);

// Collecting data from LANDSAT 8 of the AOI 2 for years 2017-2022 and
// filtering the data of the AOI to have cloud coverage < 20%
var Col_L8_2 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate ('2017', '2022')   
   .filterBounds (AOI2.bounds())
   .filter(ee.Filter.lt ('CLOUD_COVER', 20));
   
print ('Landsat 8, 2017 - 2022 Series for AOI 2', Col_L8_2);

// Filter to the AOI 2, mask clouds, add variables
var harmonicLandsat2 = Col_L8_2
  .map(addNDVI)
  .map(addConstant)
  .map(addTime)
  .map(addHarmonics(harmonicFrequencies));
  
var fittedHarmonic2 = main_fun(Col_L8_2);

  
// Plot of harmonic model of AOI 2

print(ui.Chart.image.series(
  fittedHarmonic2.select(['fitted', 'NDVI']), AOI2, ee.Reducer.mean(), 30)
    .setOptions({
      title: 'Harmonic model of AOI 2',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));

// Parameters for NDVI for AOI 1 and 2
Map.centerObject(AOI, 12);
var vis_harm = {
  bands: ['NDVI'],
  min: -0.12,
  max: 0.62,
  palette: ['ff0000','00ff00'],
  };

// Projecting NDVI for AOI 1 and 2 as Layer using the above parameters
Map.addLayer (harmonicLandsat, vis_harm, 'NDVI for AOI 1 & 2 (magenta and blue)');

/*------------------------------------------------------------------------
   AOI 3
/*----------------------------------------------------------------------*/
var x1=21.411768143340275, y1=37.68717740443796,
    x2=21.451936905547306, y2=37.69070931661936,
    x3=21.467386429473088, y3=37.66136217150094,
    x4=21.42515773074262, y4=37.66081859638563,
    x5=21.411768143340275, y5=37.68717740443796;

var AOI3 = ee.Geometry.LineString (
  [[x1, y1], [x2, y2], [x3, y3], [x4, y4], [x5, y5]]);

// Collecting data from LANDSAT 8 of the AOI 3 for years 2017-2022 and
// filtering the data of the AOI to have cloud coverage < 20%
var Col_L8_3 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate ('2017', '2022')   
   .filterBounds (AOI3.bounds())
   .filter(ee.Filter.lt ('CLOUD_COVER', 20));
   
print ('Landsat 8, 2017 - 2022 Series for AOI 3', Col_L8_3);

// Variable and number of harmonics' cycles
var dependent = 'BSI';
var harmonics = 3;

// Creating Functions that:

// Get a list of harmonic frequencies
var harmonicFrequencies = ee.List.sequence (1, harmonics);

// Function to get a sequence of band names for harmonic terms

var getNames = function(base, list) {
  return ee.List(list).map(function(i) { 
    return ee.String(base).cat(ee.Number(i).int());
  });
};

// Get lists of names for harmonic frequencies
var cosNames = getNames('cos_', harmonicFrequencies);
var sinNames = getNames('sin_', harmonicFrequencies);

// Set independent variables
var independents = ee.List(['constant', 't']).cat(cosNames).cat(sinNames);

// Find BSI and add it as band
var addBSI = function(image) {
  return image
    .addBands(image.expression(
    'float (((b("B4") + b("B6")) - (b("B5") + b("B2"))) / ((b("B4") + b("B6")) + (b("B5") + b("B2"))))')
    .rename('BSI'))
    .float();
};

// Add a constant band
var addConstant = function(image) {
  return image.addBands(ee.Image(1));
};

// Add a time band
var addTime = function(image) {
  var date = image.date();
  var years = date.difference(ee.Date('2017-01-01'), 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI));
  return image.addBands(timeRadians.rename('t').float());
};

// Computes the specified number of harmonics and add them as bands
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies
    var frequencies = ee.Image.constant(freqs);
    // This band represents time in radians
    var time = ee.Image(image).select('t');
    // Get the cos terms
    var cosines = time.multiply(frequencies).cos().rename(cosNames);
    // Get the sin terms
    var sines = time.multiply(frequencies).sin().rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};

// Filter to the AOI 3, mask clouds, add variables
var harmonicLandsat = Col_L8_3
  .map(addBSI)
  .map(addConstant)
  .map(addTime)
  .map(addHarmonics(harmonicFrequencies));

var harmonicTrend = harmonicLandsat
  .select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));
  
// Turn the array image into a multi-band image of coefficients
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);

// Computing the values of fitted harmonics
var fittedHarmonic3 = harmonicLandsat.map(function(image) {
  return image.addBands(
    image.select(independents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted'));
});
  
// Plot of harmonic model of AOI 3
print(ui.Chart.image.series(
  fittedHarmonic3.select(['fitted', 'BSI']), AOI3, ee.Reducer.mean(), 30)
    .setOptions({
      title: 'Harmonic model of AOI 3',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));
    

// Parameters for BSI for AOI 3
Map.centerObject(AOI, 12);
var vis_harm = {
  bands:['BSI'],
  min   : -0.33,
  max   : 0.12,
  palette: ['000000', 'ffffff']
};

// Projecting BSI for AOI 3 as Layer using the above parameters
Map.addLayer (harmonicLandsat, vis_harm, 'BSI for AOI 3 (cyan)');

/*------------------------------------------------------------------------
   AOI 4
/*----------------------------------------------------------------------*/
var x1=21.423269455596134, y1=37.62996418705479,
    x2=21.436487381621525, y2=37.6362176578425,
    x3=21.36541957156293, y3=37.66639005262889,
    x4=21.423269455596134, y4=37.62996418705479;

var AOI4 = ee.Geometry.LineString (
  [[x1, y1], [x2, y2], [x3, y3], [x4, y4]]);

// Collecting data from LANDSAT 8 of the AOI for years 2017-2022 and
// filtering the data of the AOI to have cloud coverage < 20%
var Col_L8_4 = ee.ImageCollection('LANDSAT/LC08/C02/T1')
   .filterDate ('2017', '2022')   
   .filterBounds (AOI4.bounds())
   .filter(ee.Filter.lt ('CLOUD_COVER', 20));
   
// Variable and number of harmonics' cycles
var dependent = 'NDWI';
var harmonics = 2;

// Creating Functions that:

// Get a list of harmonic frequencies
var harmonicFrequencies = ee.List.sequence (1, harmonics);

// Function to get a sequence of band names for harmonic terms
var getNames = function(base, list) {
  return ee.List(list).map(function(i) { 
    return ee.String(base).cat(ee.Number(i).int());
  });
};

// Get lists of names for harmonic frequencies
var cosNames = getNames('cos_', harmonicFrequencies);
var sinNames = getNames('sin_', harmonicFrequencies);

// Set independent variables
var independents = ee.List(['constant', 't']).cat(cosNames).cat(sinNames);

// Find NDVI and add it as band
var addNDWI = function(image) {
  return image
    .addBands(image.normalizedDifference(['B3', 'B5'])
    .rename('NDWI'))
    .float();
};

// Add a constant band
var addConstant = function(image) {
  return image.addBands(ee.Image(1));
};

// Add a time band
var addTime = function(image) {
  var date = image.date();
  var years = date.difference(ee.Date('2017-01-01'), 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI));
  return image.addBands(timeRadians.rename('t').float());
};

// Computes the specified number of harmonics and add them as bands
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies
    var frequencies = ee.Image.constant(freqs);
    // This band should represent time in radians
    var time = ee.Image(image).select('t');
    // Get the cos terms
    var cosines = time.multiply(frequencies).cos().rename(cosNames);
    // Get the sin terms
    var sines = time.multiply(frequencies).sin().rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};

// Filter to the AOI 4, mask clouds, add variables
var harmonicLandsat = Col_L8_4
  .map(addNDWI)
  .map(addConstant)
  .map(addTime)
  .map(addHarmonics(harmonicFrequencies));

var harmonicTrend = harmonicLandsat
  .select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));
  
// Turn the array image into a multi-band image of coefficients
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);

// Computing the values of fitted harmonics
var fittedHarmonic4 = harmonicLandsat.map(function(image) {
  return image.addBands(
    image.select(independents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted'));
});
  
  
// Plot of harmonic model of AOI 4
print(ui.Chart.image.series(
  fittedHarmonic4.select(['fitted', 'NDWI']), AOI4, ee.Reducer.mean(), 30)
    .setOptions({
      title: 'Harmonic model of AOI 4',
      curveType: 'function',
      lineWidth: 2,
      pointSize: 3
    }));
    

// Parameters for NDWI for AOI 4
Map.centerObject(AOI, 12);
var vis_harm = {
  bands:['NDWI'],
  min: -0.44,
  max: 0.22,
  palette: ['ff0000', '00ff00', '0000ff']
};

// Projecting NDWI for AOI 4 as Layer using the above parameters
Map.addLayer (harmonicLandsat, vis_harm, 'NDWI for AOI 4 (yellow)');

/**********************************************************************/
Map.addLayer (AOI, {'color' : 'magenta'}, 'AOI');
Map.addLayer (AOI2, {'color' : 'blue'}, 'AOI2');
Map.addLayer (AOI3, {'color' : 'cyan'}, 'AOI3');
Map.addLayer (AOI4, {'color' : 'yellow'}, 'AOI4');
